import telebot
import re
from telebot.types import BotCommand, Message
from telebot import custom_filters
from telebot.storage import StateMemoryStorage
from peewee import IntegrityError
from models import User, create_models
from config import BOT_TOKEN, greeting, DEFAULT_COMMANDS
from states import States
from api import cities, ticket

state_storage = StateMemoryStorage()
bot = telebot.TeleBot(BOT_TOKEN, state_storage=state_storage)


@bot.message_handler(commands=['start'])
def start(message: Message) -> None:
    """
    –°—é–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–¥–∞–µ—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –Ω–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å (–ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /start)
    –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–Ω –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å–ø–∏—Å–æ–∫, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞¬ª –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    :return: Message : str
    """
    user_id: int = message.from_user.id
    username: str = message.from_user.username
    first_name: str = message.from_user.first_name
    last_name: str = message.from_user.last_name

    try:
        User.create(
            user_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
        )
        bot.send_message(
            message.chat.id,
            '{hello}, {name} üëãüèª\n\n–Ø –Ω–∞–π–¥—É —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã üé´Ô∏è\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ üõ´'.format(
                hello=greeting,
                name=first_name
            )
        )
        bot.set_state(message.from_user.id, States.departure_city, message.chat.id)
    except IntegrityError:
        bot.reply_to(message,
                     f"{greeting}, {first_name}! –Ø —Å–Ω–æ–≤–∞ –∫ –í–∞—à–∏–º —É—Å–ª—É–≥–∞–º ü´°\n\n–î–∞–≤–∞–π—Ç–µ –ø–æ–∏—â–µ–º –±–∏–ª–µ—Ç\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ üõ´")
        bot.set_state(message.from_user.id, States.departure_city, message.chat.id)


@bot.message_handler(state=States.departure_city)
def departure_city(message: Message) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥), –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —à–∞–≥–æ–º, –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç api.py -> cities()
    –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ.
    –î–∞–ª–µ–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è¬ª –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    :return: Message : str
    """
    message.text = message.text.title()

    if message.text == "/start":
        start(message)
        return

    if message.text == "/about":
        about_bot(message)
        bot.send_message(message.chat.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ üõ´')
        return

    if message.text == "/help":
        help_information(message)
        bot.send_message(message.chat.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ üõ´')
        return

    if message.text not in cities()[0]:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –Ω–∞—à–µ–ª –≥–æ—Ä–æ–¥ ¬´{city}¬ª üò± –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'.format(city=message.text))
        return

    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è üõ¨')
    bot.set_state(message.from_user.id, States.arrival_city)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        index_of_city_code = cities()[0].index(message.text)
        data['departure_city'] = message.text
        data['departure_city_code'] = cities()[1][index_of_city_code]


@bot.message_handler(state=States.arrival_city)
def arrival_city(message: Message) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥), –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —à–∞–≥–æ–º, –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç api.py -> cities()
    –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ.
    –î–∞–ª–µ–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–î–∞—Ç—É –ø–µ—Ä–µ–ª–µ—Ç–∞¬ª –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    :return: Message : str
    """
    message.text = message.text.title()

    if message.text == "/start":
        start(message)
        return

    if message.text == "/about":
        about_bot(message)
        bot.send_message(message.chat.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è üõ¨')
        return

    if message.text == "/help":
        help_information(message)
        bot.send_message(message.chat.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è üõ¨')
        return

    if message.text not in cities()[0]:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –Ω–∞—à–µ–ª –≥–æ—Ä–æ–¥ ¬´{city}¬ª üò± –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'.format(city=message.text))
        return

    bot.send_message(message.chat.id, '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ üóì (–¥–¥.–º–º.–≥–≥–≥–≥)')
    bot.set_state(message.from_user.id, States.flight_date)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        index_of_city_code = cities()[0].index(message.text)
        data['arrival_city'] = message.text
        data['arrival_city_code'] = cities()[1][index_of_city_code]


@bot.message_handler(state=States.flight_date)
def flight_date(message: Message) -> None:
    """
    –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–∏–ª–µ—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∏–º –¥–∞–Ω–Ω—ã–º–∏
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∂–µ–ª–∞–µ—Ç, –æ–Ω –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—è –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    :return: Message : str
    """
    if message.text == "/start":
        start(message)
        return

    if message.text == "/about":
        about_bot(message)
        bot.send_message(message.chat.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ üóìÔ∏è (–¥–¥.–º–º.–≥–≥–≥–≥)')
        return

    if message.text == "/help":
        help_information(message)
        bot.send_message(message.chat.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ üóìÔ∏è (–¥–¥.–º–º.–≥–≥–≥–≥)')
        return

    date_mask = re.findall(r'(\d{2}).(\d{2}).(\d{4})', message.text)

    if not date_mask:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã (–¥–¥.–º–º.–≥–≥–≥–≥)')
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:

        departure_city_code_str = str(data['departure_city_code'])
        arrival_city_code_str = str(data['arrival_city_code'])

        msg = ticket(departure_city_code_str, arrival_city_code_str, message.text)
        bot.send_message(message.chat.id, f'üõ´ {data['departure_city']} ‚Äî üõ¨ {data['arrival_city']}\n\nüóì {message.text}\n\n{msg}')

    bot.delete_state(message.from_user.id, message.chat.id)
    bot.send_message(message.chat.id, '–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start üòÄ')


@bot.message_handler(commands=['about'])
def about_bot(message: Message) -> None:
    bot.send_message(
        message.chat.id,
        '–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ ü§ó\n\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–≤–∏–∞–±–∏–ª–µ—Ç –≤ –¥–≤–∞ –∫–ª–∏–∫–∞\n\n–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ '
        '–ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞—Ç—å –æ—Ç–∫—É–¥–∞, –∫—É–¥–∞ –∏ –∫–æ–≥–¥–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–ª–µ—Ç–µ—Ç—å –∏ —è –ø–æ–¥–±–µ—Ä—É –í–∞–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç'
    )


@bot.message_handler(commands=['help'])
def help_information(message: Message) -> None:
    bot.send_message(
        message.chat.id,
        '–î–∞–Ω–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ:\n\n1Ô∏è‚É£ ‚Äî –í–≤–æ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞\n2Ô∏è‚É£ ‚Äî –í–≤–æ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è\n3Ô∏è‚É£ ‚Äî '
        '–£–∫–∞–∑—ã–≤–∞–µ—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ–ª–µ—Ç–∞\n4Ô∏è‚É£ ‚Äî –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–≤–∏–∞–±–∏–ª–µ—Ç\n5Ô∏è‚É£ ‚Äî –í –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–µ –±—É–¥–µ—Ç '
        '—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞'
    )


if __name__ == "__main__":
    create_models()
    bot.add_custom_filter(custom_filters.StateFilter(bot))
    bot.set_my_commands([BotCommand(*cmd) for cmd in DEFAULT_COMMANDS])
    bot.infinity_polling()
